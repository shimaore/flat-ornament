// Generated by CoffeeScript 1.12.7
(function() {
  var Parser, debug, execute, seem;

  seem = require('seem');

  this.name = (require('./package')).name;

  debug = (require('tangible'))(this.name);

  Parser = require('./language').Parser;

  module.exports = seem(function*(ornaments, commands) {
    var i, len, ornament, over, parser;
    if (ornaments == null) {
      return;
    }
    parser = new Parser();
    parser.yy.valid_op = commands;
    if (typeof ornaments === 'string') {
      ornaments = parser.parse("COMPILE ORNAMENTS " + ornaments);
    }
    for (i = 0, len = ornaments.length; i < len; i++) {
      ornament = ornaments[i];
      debug('ornament', ornament);
      over = (yield (function(_this) {
        return function(ornament) {
          return execute.call(_this, ornament, commands, parser);
        };
      })(this)(ornament));
      debug('over', over);
      if (over) {
        return;
      }
    }
  });

  execute = seem(function*(ornament, commands, parser) {
    var c, i, len, params, statement, truth;
    if (typeof ornament === 'string') {
      ornament = parser.parse("COMPILE ORNAMENT " + ornament);
      debug('ornament', ornament);
    }
    for (i = 0, len = ornament.length; i < len; i++) {
      statement = ornament[i];
      if (typeof statement === 'string') {
        statement = parser.parse("COMPILE STATEMENT " + statement);
        debug('statement', statement);
      }
      if (statement.length != null) {
        params = statement.slice(0);
        statement = {};
        if (params[0] === 'not') {
          params.shift();
          statement.not = true;
        }
        statement.type = params.shift();
        statement.params = params;
      }
      if (statement.type == null) {
        debug('No command', statement);
        return false;
      }
      c = commands[statement.type];
      if (c == null) {
        debug('No such command', statement.type);
        return false;
      }
      switch (false) {
        case statement.params == null:
          debug("Calling " + statement.type, statement.params);
          truth = (yield c.apply(this, statement.params));
          break;
        case statement.param == null:
          debug("Calling " + statement.type, statement.param);
          truth = (yield c.call(this, statement.param));
          break;
        default:
          debug("Calling " + statement.type + " (no arguments)");
          truth = (yield c.call(this));
      }
      if (truth === 'over') {
        return true;
      }
      if (statement.not) {
        truth = !truth;
      }
      if (!truth) {
        return false;
      }
    }
    return false;
  });

}).call(this);
