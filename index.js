// Generated by CoffeeScript 1.10.0
(function() {
  var debug, execute, seem;

  seem = require('seem');

  this.name = (require('./package')).name;

  debug = (require('debug'))(this.name);

  module.exports = seem(function*(ornaments, commands) {
    var i, len, ornament, over;
    if (ornaments == null) {
      return;
    }
    debug('Processing');
    for (i = 0, len = ornaments.length; i < len; i++) {
      ornament = ornaments[i];
      debug('ornament', ornament);
      over = (yield (function(_this) {
        return function(ornament) {
          return execute.call(_this, ornament, commands);
        };
      })(this)(ornament));
      debug('over', over);
      if (over) {
        return;
      }
    }
  });

  execute = seem(function*(ornament, commands) {
    var c, i, len, statement, truth;
    for (i = 0, len = ornament.length; i < len; i++) {
      statement = ornament[i];
      if (typeof statement === 'string') {
        statement = {
          type: statement
        };
      }
      if (statement.length != null) {
        statement = {
          type: statement[0],
          params: statement.slice(1)
        };
      }
      c = commands[statement.type];
      if (c == null) {
        debug('No such command', statement.type);
        return false;
      }
      switch (false) {
        case statement.params == null:
          debug("Calling " + statement.type, statement.params);
          truth = (yield c.apply(this, statement.params));
          break;
        case statement.param == null:
          debug("Calling " + statement.type, statement.param);
          truth = (yield c.call(this, statement.param));
          break;
        default:
          debug("Calling " + statement.type + " (no arguments)");
          truth = (yield c.call(this));
      }
      if (truth === 'over') {
        return true;
      }
      if (statement.not) {
        truth = !truth;
      }
      if (!truth) {
        return false;
      }
    }
    return false;
  });

}).call(this);
