/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var language2 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,10],$V2=[1,11],$V3=[1,12],$V4=[1,13],$V5=[1,16],$V6=[1,15],$V7=[1,14],$V8=[1,22],$V9=[1,21],$Va=[1,19],$Vb=[1,20],$Vc=[1,25],$Vd=[1,24],$Ve=[1,26],$Vf=[1,27],$Vg=[1,23],$Vh=[1,28],$Vi=[5,10,49],$Vj=[1,32],$Vk=[1,33],$Vl=[1,34],$Vm=[1,35],$Vn=[1,36],$Vo=[1,37],$Vp=[1,38],$Vq=[1,39],$Vr=[1,40],$Vs=[1,41],$Vt=[1,42],$Vu=[1,43],$Vv=[1,44],$Vw=[1,45],$Vx=[1,46],$Vy=[1,47],$Vz=[1,48],$VA=[1,49],$VB=[1,50],$VC=[1,51],$VD=[2,8],$VE=[1,54],$VF=[5,7,10,19,20,22,23,24,25,26,27,28,29,32,33,35,36,37,40,41,42,45,49,51,52,53,54],$VG=[5,7,10,42,49,52,54],$VH=[5,7,10,19,20,22,23,24,25,26,27,28,29,32,33,35,36,37,42,45,49,51,52,53,54],$VI=[1,109],$VJ=[7,42,49],$VK=[5,7,10,19,20,22,23,27,28,29,32,33,35,36,37,42,45,49,51,52,53,54],$VL=[5,7,10,19,20,27,28,29,32,33,35,36,37,42,45,49,51,52,53,54],$VM=[5,7,10,19,20,29,35,36,37,42,45,49,51,52,53,54],$VN=[7,49],$VO=[1,118],$VP=[5,7,10,42,49,52];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"start":3,"expressions":4,"EOF":5,"assignment":6,",":7,"expression":8,"{":9,"}":10,"name":11,"=":12,"float":13,"integer":14,"string":15,"TRUE":16,"FALSE":17,"POSTPONE":18,"AND":19,"OR":20,"NOT":21,"+":22,"-":23,"*":24,"/":25,"%":26,">":27,"GE":28,"IS":29,"GREATER":30,"THAN":31,"<":32,"LE":33,"LESS":34,"EQ":35,"NE":36,"ISNT":37,"THE":38,"OF":39,".":40,"[":41,"]":42,"pattern":43,"expresion":44,"~":45,"op":46,"(":47,"parameters":48,")":49,"pairs":50,"IF":51,"THEN":52,"UNLESS":53,"ELSE":54,"parameter":55,"pair":56,":":57,"INTEGER":58,"FLOAT":59,"STRING":60,"PATTERN":61,"NAME":62,"OP":63,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:",",9:"{",10:"}",12:"=",16:"TRUE",17:"FALSE",18:"POSTPONE",19:"AND",20:"OR",21:"NOT",22:"+",23:"-",24:"*",25:"/",26:"%",27:">",28:"GE",29:"IS",30:"GREATER",31:"THAN",32:"<",33:"LE",34:"LESS",35:"EQ",36:"NE",37:"ISNT",38:"THE",39:"OF",40:".",41:"[",42:"]",44:"expresion",45:"~",47:"(",49:")",51:"IF",52:"THEN",53:"UNLESS",54:"ELSE",57:":",58:"INTEGER",59:"FLOAT",60:"STRING",61:"PATTERN",62:"NAME",63:"OP"},
productions_: [0,[3,2],[3,0],[4,3],[4,3],[4,1],[4,3],[6,3],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,2],[8,3],[8,3],[8,2],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,5],[8,6],[8,3],[8,3],[8,5],[8,6],[8,3],[8,3],[8,3],[8,3],[8,4],[8,3],[8,4],[8,2],[8,2],[8,2],[8,3],[8,4],[8,4],[8,4],[8,3],[8,1],[8,2],[8,4],[8,4],[8,3],[8,3],[8,6],[8,6],[8,3],[8,3],[8,2],[48,3],[48,1],[55,1],[50,3],[50,1],[56,3],[14,1],[13,1],[15,1],[43,1],[11,1],[46,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return function () { return $$[$0-1].call(this,Immutable.Map()) /* evaluate */ } 
break;
case 2:
 return function () {} 
break;
case 3:
this.$ = async function (ctx) { var ctx = await $$[$0-2].call(this,ctx); return $$[$0].call(this,ctx); };
break;
case 4:
this.$ = async function (ctx) { var it = await $$[$0-2].call(this,ctx); return $$[$0].call(this,ctx); };
break;
case 5: case 59:
this.$ = $$[$0];
break;
case 6: case 54:
this.$ = $$[$0-1];
break;
case 7:
this.$ = async function (ctx) { var name = $$[$0-2]; var val = await $$[$0].call(this,ctx); return ctx.set(name,val); };
break;
case 8:
this.$ = function (ctx) { return ctx.get($$[$0]) };
break;
case 9: case 10: case 11: case 14:
this.$ = function (ctx) { return $$[$0] };
break;
case 12:
this.$ = function (ctx) { return true };
break;
case 13:
this.$ = function (ctx) { return false };
break;
case 15:
this.$ = async function (ctx) { var cond = await $$[$0-2].call(this,ctx); return cond && $$[$0].call(this,ctx) };
break;
case 16:
this.$ = async function (ctx) { var cond = await $$[$0-2].call(this,ctx); return cond || $$[$0].call(this,ctx) };
break;
case 17:
this.$ = async function (ctx) { return ! await $$[$0].call(this,ctx) };
break;
case 18:
this.$ = async function (ctx) { var a = await $$[$0-2].call(this,ctx); return a + await $$[$0].call(this,ctx) };
break;
case 19:
this.$ = async function (ctx) { var a = await $$[$0-2].call(this,ctx); return a - await $$[$0].call(this,ctx) };
break;
case 20:
this.$ = async function (ctx) { var a = await $$[$0-2].call(this,ctx); return a * await $$[$0].call(this,ctx) };
break;
case 21:
this.$ = async function (ctx) { var a = await $$[$0-2].call(this,ctx); return a / await $$[$0].call(this,ctx) };
break;
case 22:
this.$ = async function (ctx) { var a = await $$[$0-2].call(this,ctx); return a % await $$[$0].call(this,ctx) };
break;
case 23:
this.$ = async function (ctx) { var a = await $$[$0-2].call(this,ctx); return a > await $$[$0].call(this,ctx) };
break;
case 24:
this.$ = async function (ctx) { var a = await $$[$0-2].call(this,ctx); return a >= await $$[$0].call(this,ctx) };
break;
case 25:
this.$ = async function (ctx) { var a = await $$[$0-4].call(this,ctx); return a > await $$[$0].call(this,ctx) };
break;
case 26:
this.$ = async function (ctx) { var a = await $$[$0-5].call(this,ctx); return !(a > await $$[$0-1].call(this,ctx)) };
break;
case 27:
this.$ = async function (ctx) { var a = await $$[$0-2].call(this,ctx); return a < await $$[$0].call(this,ctx) };
break;
case 28:
this.$ = async function (ctx) { var a = await $$[$0-2].call(this,ctx); return a <= await $$[$0].call(this,ctx) };
break;
case 29:
this.$ = async function (ctx) { var a = await $$[$0-4].call(this,ctx); return a < await $$[$0].call(this,ctx) };
break;
case 30:
this.$ = async function (ctx) { var a = await $$[$0-5].call(this,ctx); return !(a < await $$[$0-1].call(this,ctx)) };
break;
case 31: case 32:
this.$ = async function (ctx) { var a = await $$[$0-2].call(this,ctx); return a === await $$[$0].call(this,ctx) };
break;
case 33: case 34:
this.$ = async function (ctx) { var a = await $$[$0-2].call(this,ctx); return a !== await $$[$0].call(this,ctx) };
break;
case 35:
this.$ = async function (ctx) { var a = await $$[$0].call(this,ctx); if ($$[$0-2] === 'length') { return a.length }; return a.get($$[$0-2]) };
break;
case 36:
this.$ = async function (ctx) { var a = await $$[$0-2].call(this,ctx); if ($$[$0] === 'length') { return a.length }; return a.get($$[$0]) };
break;
case 37:
this.$ = async function (ctx) { var a = await $$[$0-3].call(this,ctx); if (a.hasOwnProperty($$[$0-1])) { return a[$$[$0-1]] }; };
break;
case 38:
this.$ = async function (ctx) { return - await $$[$0].call(this,ctx) };
break;
case 39:
this.$ = async function (ctx) { return + await $$[$0].call(this,ctx) };
break;
case 40:
this.$ = async function (ctx) { var a = await $$[$0-1].call(this,ctx); return (typeof a === 'string') && a.match($$[$0]); };
break;
case 41:
this.$ = async function (ctx) { var a = await $$[$0-2].call(this,ctx); return (typeof a === 'string') && a.match($$[$0]); };
break;
case 42:
this.$ = async function (ctx) { var args = await Promise.all($$[$0-1].map( (a) => a.call(this,ctx) )); return $$[$0-3].apply(this,args); };
break;
case 43:
this.$ = async function (ctx) { var args = await Promise.all($$[$0-1].map( (a) => a.call(this,ctx) )); return ctx.get($$[$0-3]).apply(this,args); };
break;
case 44:
this.$ = async function (ctx) { var pairs = await Promise.all($$[$0-1].map( ([k,v]) => [k,v.call(this,ctx)] )); return ctx.get($$[$0-3]).call(this,new Map(pairs)); };
break;
case 45:
this.$ = function (ctx) { return $$[$0-2].call(this); };
break;
case 46: case 47:
this.$ = function (ctx) { return $$[$0].call(this); };
break;
case 48:
this.$ = async function (ctx) { var cond = await $$[$0-2].call(this,ctx); if (cond) return $$[$0].call(this,ctx); };
break;
case 49:
this.$ = async function (ctx) { var cond = await $$[$0-2].call(this,ctx); if (!cond) return $$[$0].call(this,ctx); };
break;
case 50:
this.$ = async function (ctx) { var cond = await $$[$0].call(this,ctx); if (cond) return $$[$0-2].call(this,ctx); };
break;
case 51:
this.$ = async function (ctx) { var cond = await $$[$0].call(this,ctx); if (!cond) return $$[$0-2].call(this,ctx); };
break;
case 52:
this.$ = async function (ctx) { var cond = await $$[$0-4].call(this,ctx); if (cond) { return $$[$0-2].call(this,ctx) } else { return $$[$0](ctx) } };
break;
case 53:
this.$ = async function (ctx) { var cond = await $$[$0-4].call(this,ctx); if (!cond) { return $$[$0-2].call(this,ctx) } else { return $$[$0](ctx) } };
break;
case 55:
this.$ = async function (ctx) { return await Promise.all($$[$0-1].map( (a) => a.call(this,ctx) )); };
break;
case 56:
this.$ = function (ctx) { return [] };
break;
case 57:
this.$ = $$[$0-2].concat([$$[$0]]);;
break;
case 58: case 61:
this.$ = [$$[$0]];
break;
case 60:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 62:
this.$ = [$$[$0-2],$$[$0]];
break;
case 63:
this.$ = parseInt(yytext,10);
break;
case 64:
this.$ = parseFloat(yytext);
break;
case 65:
this.$ = yytext.substr(1,yytext.length-2);
break;
case 66:
this.$ = pattern(yytext.substr(1,yytext.length-2));
break;
case 67:
this.$ = yytext;
break;
case 68:
this.$ = yy.op[yytext];
break;
}
},
table: [{1:[2,2],3:1,4:2,6:3,8:4,9:$V0,11:6,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{1:[3]},{5:[1,29]},{7:[1,30]},o($Vi,[2,5],{7:[1,31],19:$Vj,20:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,32:$Vt,33:$Vu,35:$Vv,36:$Vw,37:$Vx,40:$Vy,41:$Vz,45:$VA,51:$VB,53:$VC}),{4:52,6:3,8:4,9:$V0,11:6,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},o([5,7,10,19,20,22,23,24,25,26,27,28,29,32,33,35,36,37,40,41,45,49,51,53],$VD,{12:[1,53],47:$VE}),o($VF,[2,9]),o($VF,[2,10]),o($VF,[2,11]),o($VF,[2,12]),o($VF,[2,13]),{8:55,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{8:57,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{11:58,46:59,62:$Vg,63:$Vh},{8:60,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{8:61,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{44:[1,62]},o($VF,[2,46],{47:[1,63]}),{8:64,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{8:65,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{4:66,6:3,8:4,9:$V0,11:6,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{8:70,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,42:[1,68],43:17,46:18,47:$V9,48:67,51:$Va,53:$Vb,55:69,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},o([5,7,10,12,19,20,22,23,24,25,26,27,28,29,32,33,35,36,37,39,40,41,42,45,47,49,51,52,53,54,57],[2,67]),o($VF,[2,64]),o($VF,[2,63]),o($VF,[2,65]),o([5,7,10,19,20,22,23,24,25,26,27,28,29,32,33,35,36,37,40,41,42,44,45,49,51,52,53,54],[2,66]),o([5,7,10,19,20,22,23,24,25,26,27,28,29,32,33,35,36,37,40,41,42,45,47,49,51,52,53,54],[2,68]),{1:[2,1]},{4:71,6:3,8:4,9:$V0,11:6,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{4:72,6:3,8:4,9:$V0,11:6,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{8:73,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{8:74,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{8:75,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{8:76,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{8:77,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{8:78,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{8:79,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{8:80,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{8:81,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{8:85,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:[1,83],22:$V5,23:$V6,30:[1,82],34:[1,84],38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{8:86,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{8:87,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{8:88,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{8:89,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{8:90,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{11:91,62:$Vg},{14:92,58:$Vc},{43:93,61:$Vf},{8:94,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{8:95,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{10:[1,96]},{8:97,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{8:70,11:101,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,48:98,50:99,51:$Va,53:$Vb,55:69,56:100,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},o($VG,[2,14],{19:$Vj,20:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,32:$Vt,33:$Vu,35:$Vv,36:$Vw,37:$Vx,40:$Vy,41:$Vz,45:$VA,51:$VB,53:$VC}),o($VF,$VD,{47:$VE}),o($VH,[2,17],{40:$Vy,41:$Vz}),{39:[1,102]},o($VF,[2,47]),o($VH,[2,38],{40:$Vy,41:$Vz}),o($VH,[2,39],{40:$Vy,41:$Vz}),o($VF,[2,40]),{8:70,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,48:103,49:[1,104],51:$Va,53:$Vb,55:69,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{19:$Vj,20:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,32:$Vt,33:$Vu,35:$Vv,36:$Vw,37:$Vx,40:$Vy,41:$Vz,45:$VA,51:$VB,52:[1,105],53:$VC},{19:$Vj,20:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,32:$Vt,33:$Vu,35:$Vv,36:$Vw,37:$Vx,40:$Vy,41:$Vz,45:$VA,51:$VB,52:[1,106],53:$VC},{49:[1,107]},{7:$VI,42:[1,108]},o($VF,[2,56]),o($VJ,[2,58]),o($VJ,[2,59],{19:$Vj,20:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,32:$Vt,33:$Vu,35:$Vv,36:$Vw,37:$Vx,40:$Vy,41:$Vz,45:$VA,51:$VB,53:$VC}),o($Vi,[2,3]),o($Vi,[2,4]),o([5,7,10,19,20,42,49,51,52,53,54],[2,15],{22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,32:$Vt,33:$Vu,35:$Vv,36:$Vw,37:$Vx,40:$Vy,41:$Vz,45:$VA}),o([5,7,10,20,42,49,51,52,53,54],[2,16],{19:$Vj,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,32:$Vt,33:$Vu,35:$Vv,36:$Vw,37:$Vx,40:$Vy,41:$Vz,45:$VA}),o($VK,[2,18],{24:$Vn,25:$Vo,26:$Vp,40:$Vy,41:$Vz}),o($VK,[2,19],{24:$Vn,25:$Vo,26:$Vp,40:$Vy,41:$Vz}),o($VH,[2,20],{40:$Vy,41:$Vz}),o($VH,[2,21],{40:$Vy,41:$Vz}),o($VH,[2,22],{40:$Vy,41:$Vz}),o($VL,[2,23],{22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,40:$Vy,41:$Vz}),o($VL,[2,24],{22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,40:$Vy,41:$Vz}),{31:[1,110]},{8:57,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,30:[1,111],34:[1,112],38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{31:[1,113]},o($VM,[2,32],{22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,27:$Vq,28:$Vr,32:$Vt,33:$Vu,40:$Vy,41:$Vz}),o($VL,[2,27],{22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,40:$Vy,41:$Vz}),o($VL,[2,28],{22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,40:$Vy,41:$Vz}),o($VM,[2,31],{22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,27:$Vq,28:$Vr,32:$Vt,33:$Vu,40:$Vy,41:$Vz}),o($VM,[2,33],{22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,27:$Vq,28:$Vr,32:$Vt,33:$Vu,40:$Vy,41:$Vz}),o($VM,[2,34],{22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,27:$Vq,28:$Vr,32:$Vt,33:$Vu,40:$Vy,41:$Vz}),o($VF,[2,36]),{42:[1,114]},o($VF,[2,41]),o($VG,[2,50],{19:$Vj,20:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,32:$Vt,33:$Vu,35:$Vv,36:$Vw,37:$Vx,40:$Vy,41:$Vz,45:$VA,51:$VB,53:$VC}),o($VG,[2,51],{19:$Vj,20:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,32:$Vt,33:$Vu,35:$Vv,36:$Vw,37:$Vx,40:$Vy,41:$Vz,45:$VA,51:$VB,53:$VC}),o($Vi,[2,6]),{7:[2,7],19:$Vj,20:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,32:$Vt,33:$Vu,35:$Vv,36:$Vw,37:$Vx,40:$Vy,41:$Vz,45:$VA,51:$VB,53:$VC},{7:$VI,49:[1,115]},{7:[1,117],49:[1,116]},o($VN,[2,61]),o([7,19,20,22,23,24,25,26,27,28,29,32,33,35,36,37,40,41,45,49,51,53],$VD,{47:$VE,57:$VO}),{8:119,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{7:$VI,49:[1,120]},o($VF,[2,45]),{8:121,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{8:122,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},o($VF,[2,54]),o($VF,[2,55]),{8:70,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,55:123,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{8:124,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{31:[1,125]},{31:[1,126]},{8:127,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},o($VF,[2,37]),o($VF,[2,43]),o($VF,[2,44]),{11:129,56:128,62:$Vg},{8:130,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},o($VF,[2,35]),o($VF,[2,42]),o($VP,[2,48],{19:$Vj,20:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,32:$Vt,33:$Vu,35:$Vv,36:$Vw,37:$Vx,40:$Vy,41:$Vz,45:$VA,51:$VB,53:$VC,54:[1,131]}),o($VP,[2,49],{19:$Vj,20:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,32:$Vt,33:$Vu,35:$Vv,36:$Vw,37:$Vx,40:$Vy,41:$Vz,45:$VA,51:$VB,53:$VC,54:[1,132]}),o($VJ,[2,57]),o($VM,[2,25],{22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,27:$Vq,28:$Vr,32:$Vt,33:$Vu,40:$Vy,41:$Vz}),{8:133,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{8:134,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},o($VM,[2,29],{22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,27:$Vq,28:$Vr,32:$Vt,33:$Vu,40:$Vy,41:$Vz}),o($VN,[2,60]),{57:$VO},o($VN,[2,62],{19:$Vj,20:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,32:$Vt,33:$Vu,35:$Vv,36:$Vw,37:$Vx,40:$Vy,41:$Vz,45:$VA,51:$VB,53:$VC}),{8:135,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{8:136,11:56,13:7,14:8,15:9,16:$V1,17:$V2,18:$V3,21:$V4,22:$V5,23:$V6,38:$V7,41:$V8,43:17,46:18,47:$V9,51:$Va,53:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},o($VM,[2,26],{22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,27:$Vq,28:$Vr,32:$Vt,33:$Vu,40:$Vy,41:$Vz}),o($VM,[2,30],{22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,27:$Vq,28:$Vr,32:$Vt,33:$Vu,40:$Vy,41:$Vz}),o($VG,[2,52],{19:$Vj,20:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,32:$Vt,33:$Vu,35:$Vv,36:$Vw,37:$Vx,40:$Vy,41:$Vz,45:$VA,51:$VB,53:$VC}),o($VG,[2,53],{19:$Vj,20:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,32:$Vt,33:$Vu,35:$Vv,36:$Vw,37:$Vx,40:$Vy,41:$Vz,45:$VA,51:$VB,53:$VC})],
defaultActions: {29:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


const Immutable = require('immutable');
const pattern = require ('./pattern');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip */
break;
case 1:return 51
break;
case 2:return 53
break;
case 3:return 52
break;
case 4:return 54
break;
case 5:return 19
break;
case 6:return 20
break;
case 7:return 21
break;
case 8:return 29
break;
case 9:return 37
break;
case 10:return 37
break;
case 11:return 35
break;
case 12:return 36
break;
case 13:return 36
break;
case 14:return 36
break;
case 15:return 28
break;
case 16:return 33
break;
case 17:return 16
break;
case 18:return 17
break;
case 19:return 30
break;
case 20:return 34
break;
case 21:return 34
break;
case 22:return 31
break;
case 23:return 38
break;
case 24:return 39
break;
case 25:return 18
break;
case 26:return 18
break;
case 27:return 18
break;
case 28:return 59
break;
case 29:return 58
break;
case 30:return 60
break;
case 31:return 60
break;
case 32:return 61
break;
case 33:return (yy.op && yy_.yytext in yy.op) ? 'OP' : 'NAME'
break;
case 34:/* comment */
break;
case 35:return 5
break;
case 36:return yy_.yytext
break;
case 37:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:if)/,/^(?:unless)/,/^(?:then)/,/^(?:else)/,/^(?:and)/,/^(?:or)/,/^(?:not)/,/^(?:is)/,/^(?:isn't)/,/^(?:isnt)/,/^(?:==)/,/^(?:!=)/,/^(?:<>)/,/^(?:≠)/,/^(?:<=)/,/^(?:>=)/,/^(?:true)/,/^(?:false)/,/^(?:greater)/,/^(?:less)/,/^(?:smaller)/,/^(?:than)/,/^(?:the)/,/^(?:of)/,/^(?:postpone)/,/^(?:→)/,/^(?:->)/,/^(?:([0-9]+\.(?:[0-9]+)?\b))/,/^(?:([0-9]+))/,/^(?:([']([^'\r\n]*)[']))/,/^(?:(["]([^"\r\n]*)["]))/,/^(?:([\/](\d|\?|\.|\.\.|\.\.\.|)+[\/]))/,/^(?:([A-Za-z][\w-]*))/,/^(?:#[^\r\n]+[\r\n])/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"simple":{"rules":[],"inclusive":false},"frcgu":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = language2;
exports.Parser = language2.Parser;
exports.parse = function () { return language2.parse.apply(language2, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}